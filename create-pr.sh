#!/bin/bash

# Script pour cr√©er une Pull Request pour la Phase 1.2
# Usage: ./create-pr.sh [GITHUB_TOKEN]

# Charger les variables d'environnement depuis .env si le fichier existe
if [ -f ".env" ]; then
    export $(cat .env | grep -v '^#' | xargs)
fi

GITHUB_TOKEN=${1:-$GITHUB_TOKEN}
REPO="nmoral/go-to-extension"
BASE_BRANCH="main"
HEAD_BRANCH="feature/phase-1.2-plugin-system"

if [ -z "$GITHUB_TOKEN" ]; then
    echo "‚ùå Erreur: Token GitHub requis"
    echo "Usage: ./create-pr.sh [GITHUB_TOKEN]"
    echo "Ou d√©finissez la variable d'environnement GITHUB_TOKEN"
    exit 1
fi

echo "üöÄ Cr√©ation de la Pull Request pour la Phase 1.2..."

# Donn√©es de la Pull Request
PR_BODY=$(cat << 'EOF'
# Phase 1.2 - Architecture Plugin-Based D√©port√©e

## üéØ Objectifs

Cette PR impl√©mente l'architecture plugin-based d√©port√©e qui permet √† l'extension Code Navigator Pro de s'adapter automatiquement aux technologies pr√©sentes dans le projet en chargeant dynamiquement les plugins appropri√©s depuis des repositories externes.

## ‚úÖ Fonctionnalit√©s Impl√©ment√©es

### 1. Syst√®me de D√©tection Automatique des Technologies
- D√©tection par fichiers de configuration (package.json, composer.json, go.mod, etc.)
- D√©tection par extensions de fichiers (.js, .ts, .php, .go, .py, .rs, etc.)
- D√©tection par structure de projet (node_modules, vendor, target, etc.)
- Support de 15+ technologies principales
- Calcul de niveau de confiance pour chaque technologie

### 2. Syst√®me de Chargement Dynamique de Plugins
- T√©l√©chargement depuis GitHub/GitLab
- Validation d'int√©grit√© des plugins (checksums)
- Gestion de cache local
- Gestion des erreurs et fallback
- Installation automatique avec gestion des d√©pendances

### 3. Registry de Plugins Multi-Repositories
- Enregistrement/d√©senregistrement de plugins
- R√©solution de conflits de versions
- Synchronisation avec repositories distants
- Gestion des d√©pendances entre plugins
- Persistance de l'√©tat du registry

### 4. Syst√®me d'√âv√©nements Inter-Plugins
- Pattern publication/abonnement
- Middleware pour filtrage et validation
- Historique des √©v√©nements
- Statistiques de performance
- √âv√©nements standardis√©s du syst√®me

### 5. Syst√®me de Logging et Monitoring
- Logs multi-niveaux (DEBUG, INFO, WARN, ERROR)
- Mesure de performance des op√©rations
- Persistance dans des fichiers avec rotation
- Export des logs pour debugging
- Statistiques de performance

## üìÅ Fichiers Ajout√©s/Modifi√©s

### Nouveaux Fichiers
- `src/types/plugin.ts` - Interfaces TypeScript pour le syst√®me de plugins
- `src/core/plugin-system/detector/technology-detector.ts` - D√©tection automatique des technologies
- `src/core/plugin-system/loader/plugin-loader.ts` - Chargement dynamique de plugins
- `src/core/plugin-system/registry/plugin-registry.ts` - Registry multi-repositories
- `src/core/plugin-system/api/event-bus.ts` - Syst√®me d'√©v√©nements inter-plugins
- `src/core/plugin-system/index.ts` - Exports principaux du syst√®me
- `src/utils/logger.ts` - Syst√®me de logging structur√©
- `plugins/example-javascript/` - Exemple de plugin JavaScript
- `docs/PHASE_1_2_PLUGIN_SYSTEM.md` - Documentation compl√®te
- `PHASE_1_2_SUMMARY.md` - R√©sum√© des accomplissements

### Fichiers Modifi√©s
- `src/extension.ts` - Int√©gration du syst√®me de plugins

## üîß Architecture

L'architecture plugin-based d√©port√©e comprend :

1. **D√©tection Automatique** : Identifie les technologies du projet
2. **Chargement Dynamique** : T√©l√©charge les plugins appropri√©s
3. **Registry Centralis√©** : G√®re les plugins et leurs d√©pendances
4. **Communication √âv√©nementielle** : Coordination entre composants
5. **Monitoring Complet** : Logging et m√©triques de performance

## üöÄ Utilisation

L'extension d√©tecte automatiquement les technologies au d√©marrage et charge les plugins appropri√©s. Les d√©veloppeurs peuvent √©galement :

- Utiliser les commandes VS Code pour g√©rer les plugins
- Synchroniser avec les repositories de plugins
- Consulter les logs et m√©triques de performance

## üìä M√©triques

- **Lignes de code :** ~3,400 lignes
- **Fichiers cr√©√©s :** 12 fichiers
- **Tests :** Structure de base (√† compl√©ter)
- **Documentation :** ‚úÖ Compl√®te
- **Compilation :** ‚úÖ Sans erreurs

## üîÑ Prochaines √âtapes

Cette PR pose les fondations pour :
- **Phase 2** : Marketplace et plugins officiels
- **Phase 3** : Moteur d'analyse intelligent par plugin
- **Phase 4** : Navigation contextuelle par plugin

## üß™ Tests

- ‚úÖ Compilation TypeScript sans erreurs
- ‚úÖ Structure de base des tests en place
- ‚è≥ Tests unitaires √† impl√©menter dans les phases suivantes

## üìù Notes

- L'architecture est extensible et modulaire
- Le syst√®me de plugins est s√©curis√© avec validation d'int√©grit√©
- La documentation est compl√®te et d√©taill√©e
- L'exemple de plugin JavaScript d√©montre l'utilisation du syst√®me

---

**Type :** feature
**Breaking Changes :** Non
**Tests :** Structure de base
**Documentation :** ‚úÖ Compl√®te
EOF
)

# Cr√©er le JSON pour l'API
PR_DATA=$(cat << EOF
{
  "title": "feat: Phase 1.2 - Architecture Plugin-Based D√©port√©e",
  "body": $(echo "$PR_BODY" | jq -Rs .),
  "head": "$HEAD_BRANCH",
  "base": "$BASE_BRANCH",
  "draft": false
}
EOF
)

# Cr√©er la Pull Request
RESPONSE=$(curl -s -X POST \
  -H "Authorization: token $GITHUB_TOKEN" \
  -H "Accept: application/vnd.github.v3+json" \
  -H "Content-Type: application/json" \
  -d "$PR_DATA" \
  "https://api.github.com/repos/$REPO/pulls")

# V√©rifier la r√©ponse
if echo "$RESPONSE" | grep -q '"number"'; then
    PR_NUMBER=$(echo "$RESPONSE" | grep -o '"number":[0-9]*' | cut -d':' -f2)
    PR_URL=$(echo "$RESPONSE" | grep -o '"html_url":"[^"]*"' | cut -d'"' -f4)
    
    echo "‚úÖ Pull Request cr√©√©e avec succ√®s !"
    echo "üìã Num√©ro: #$PR_NUMBER"
    echo "üîó URL: $PR_URL"
    
    # Ajouter des labels
    curl -s -X POST \
      -H "Authorization: token $GITHUB_TOKEN" \
      -H "Accept: application/vnd.github.v3+json" \
      -d '{"labels":["phase-1.2", "plugin-system", "architecture", "feature"]}' \
      "https://api.github.com/repos/$REPO/issues/$PR_NUMBER/labels" > /dev/null
    
    echo "üè∑Ô∏è Labels ajout√©s: phase-1.2, plugin-system, architecture, feature"
    
else
    echo "‚ùå Erreur lors de la cr√©ation de la Pull Request:"
    echo "$RESPONSE"
    exit 1
fi
